// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YituAudioSpeech.proto

package com.yitutech.speech;

/**
 * <pre>
 * 转写
 * </pre>
 *
 * Protobuf type {@code StreamingTranscription}
 */
public final class StreamingTranscription extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:StreamingTranscription)
    StreamingTranscriptionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StreamingTranscription.newBuilder() to construct.
  private StreamingTranscription(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StreamingTranscription() {
    transcribedText_ = "";
    piece_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new StreamingTranscription();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private StreamingTranscription(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            transcribedText_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              piece_ = new java.util.ArrayList<StreamingTranscriptionPiece>();
              mutable_bitField0_ |= 0x00000001;
            }
            piece_.add(
                input.readMessage(StreamingTranscriptionPiece.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        piece_ = java.util.Collections.unmodifiableList(piece_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return StreamingProtos.internal_static_StreamingTranscription_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return StreamingProtos.internal_static_StreamingTranscription_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            StreamingTranscription.class, Builder.class);
  }

  public static final int TRANSCRIBEDTEXT_FIELD_NUMBER = 1;
  private volatile Object transcribedText_;
  /**
   * <pre>
   * 转写结果
   * </pre>
   *
   * <code>string transcribedText = 1;</code>
   * @return The transcribedText.
   */
  @Override
  public String getTranscribedText() {
    Object ref = transcribedText_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      transcribedText_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 转写结果
   * </pre>
   *
   * <code>string transcribedText = 1;</code>
   * @return The bytes for transcribedText.
   */
  @Override
  public com.google.protobuf.ByteString
      getTranscribedTextBytes() {
    Object ref = transcribedText_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      transcribedText_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PIECE_FIELD_NUMBER = 2;
  private java.util.List<StreamingTranscriptionPiece> piece_;
  /**
   * <pre>
   * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
   * </pre>
   *
   * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
   */
  @Override
  public java.util.List<StreamingTranscriptionPiece> getPieceList() {
    return piece_;
  }
  /**
   * <pre>
   * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
   * </pre>
   *
   * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
   */
  @Override
  public java.util.List<? extends StreamingTranscriptionPieceOrBuilder>
      getPieceOrBuilderList() {
    return piece_;
  }
  /**
   * <pre>
   * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
   * </pre>
   *
   * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
   */
  @Override
  public int getPieceCount() {
    return piece_.size();
  }
  /**
   * <pre>
   * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
   * </pre>
   *
   * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
   */
  @Override
  public StreamingTranscriptionPiece getPiece(int index) {
    return piece_.get(index);
  }
  /**
   * <pre>
   * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
   * </pre>
   *
   * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
   */
  @Override
  public StreamingTranscriptionPieceOrBuilder getPieceOrBuilder(
      int index) {
    return piece_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getTranscribedTextBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transcribedText_);
    }
    for (int i = 0; i < piece_.size(); i++) {
      output.writeMessage(2, piece_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getTranscribedTextBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transcribedText_);
    }
    for (int i = 0; i < piece_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, piece_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof StreamingTranscription)) {
      return super.equals(obj);
    }
    StreamingTranscription other = (StreamingTranscription) obj;

    if (!getTranscribedText()
        .equals(other.getTranscribedText())) return false;
    if (!getPieceList()
        .equals(other.getPieceList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TRANSCRIBEDTEXT_FIELD_NUMBER;
    hash = (53 * hash) + getTranscribedText().hashCode();
    if (getPieceCount() > 0) {
      hash = (37 * hash) + PIECE_FIELD_NUMBER;
      hash = (53 * hash) + getPieceList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static StreamingTranscription parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static StreamingTranscription parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static StreamingTranscription parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static StreamingTranscription parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static StreamingTranscription parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static StreamingTranscription parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static StreamingTranscription parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static StreamingTranscription parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static StreamingTranscription parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static StreamingTranscription parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static StreamingTranscription parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static StreamingTranscription parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(StreamingTranscription prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * 转写
   * </pre>
   *
   * Protobuf type {@code StreamingTranscription}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:StreamingTranscription)
      StreamingTranscriptionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return StreamingProtos.internal_static_StreamingTranscription_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return StreamingProtos.internal_static_StreamingTranscription_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              StreamingTranscription.class, Builder.class);
    }

    // Construct using com.yitutech.speech.StreamingTranscription.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPieceFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      transcribedText_ = "";

      if (pieceBuilder_ == null) {
        piece_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        pieceBuilder_.clear();
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return StreamingProtos.internal_static_StreamingTranscription_descriptor;
    }

    @Override
    public StreamingTranscription getDefaultInstanceForType() {
      return StreamingTranscription.getDefaultInstance();
    }

    @Override
    public StreamingTranscription build() {
      StreamingTranscription result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public StreamingTranscription buildPartial() {
      StreamingTranscription result = new StreamingTranscription(this);
      int from_bitField0_ = bitField0_;
      result.transcribedText_ = transcribedText_;
      if (pieceBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          piece_ = java.util.Collections.unmodifiableList(piece_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.piece_ = piece_;
      } else {
        result.piece_ = pieceBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof StreamingTranscription) {
        return mergeFrom((StreamingTranscription)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(StreamingTranscription other) {
      if (other == StreamingTranscription.getDefaultInstance()) return this;
      if (!other.getTranscribedText().isEmpty()) {
        transcribedText_ = other.transcribedText_;
        onChanged();
      }
      if (pieceBuilder_ == null) {
        if (!other.piece_.isEmpty()) {
          if (piece_.isEmpty()) {
            piece_ = other.piece_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePieceIsMutable();
            piece_.addAll(other.piece_);
          }
          onChanged();
        }
      } else {
        if (!other.piece_.isEmpty()) {
          if (pieceBuilder_.isEmpty()) {
            pieceBuilder_.dispose();
            pieceBuilder_ = null;
            piece_ = other.piece_;
            bitField0_ = (bitField0_ & ~0x00000001);
            pieceBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPieceFieldBuilder() : null;
          } else {
            pieceBuilder_.addAllMessages(other.piece_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      StreamingTranscription parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (StreamingTranscription) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private Object transcribedText_ = "";
    /**
     * <pre>
     * 转写结果
     * </pre>
     *
     * <code>string transcribedText = 1;</code>
     * @return The transcribedText.
     */
    public String getTranscribedText() {
      Object ref = transcribedText_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        transcribedText_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * 转写结果
     * </pre>
     *
     * <code>string transcribedText = 1;</code>
     * @return The bytes for transcribedText.
     */
    public com.google.protobuf.ByteString
        getTranscribedTextBytes() {
      Object ref = transcribedText_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        transcribedText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 转写结果
     * </pre>
     *
     * <code>string transcribedText = 1;</code>
     * @param value The transcribedText to set.
     * @return This builder for chaining.
     */
    public Builder setTranscribedText(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      transcribedText_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 转写结果
     * </pre>
     *
     * <code>string transcribedText = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTranscribedText() {
      
      transcribedText_ = getDefaultInstance().getTranscribedText();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 转写结果
     * </pre>
     *
     * <code>string transcribedText = 1;</code>
     * @param value The bytes for transcribedText to set.
     * @return This builder for chaining.
     */
    public Builder setTranscribedTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      transcribedText_ = value;
      onChanged();
      return this;
    }

    private java.util.List<StreamingTranscriptionPiece> piece_ =
      java.util.Collections.emptyList();
    private void ensurePieceIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        piece_ = new java.util.ArrayList<StreamingTranscriptionPiece>(piece_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            StreamingTranscriptionPiece, StreamingTranscriptionPiece.Builder, StreamingTranscriptionPieceOrBuilder> pieceBuilder_;

    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public java.util.List<StreamingTranscriptionPiece> getPieceList() {
      if (pieceBuilder_ == null) {
        return java.util.Collections.unmodifiableList(piece_);
      } else {
        return pieceBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public int getPieceCount() {
      if (pieceBuilder_ == null) {
        return piece_.size();
      } else {
        return pieceBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public StreamingTranscriptionPiece getPiece(int index) {
      if (pieceBuilder_ == null) {
        return piece_.get(index);
      } else {
        return pieceBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder setPiece(
        int index, StreamingTranscriptionPiece value) {
      if (pieceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePieceIsMutable();
        piece_.set(index, value);
        onChanged();
      } else {
        pieceBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder setPiece(
        int index, StreamingTranscriptionPiece.Builder builderForValue) {
      if (pieceBuilder_ == null) {
        ensurePieceIsMutable();
        piece_.set(index, builderForValue.build());
        onChanged();
      } else {
        pieceBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder addPiece(StreamingTranscriptionPiece value) {
      if (pieceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePieceIsMutable();
        piece_.add(value);
        onChanged();
      } else {
        pieceBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder addPiece(
        int index, StreamingTranscriptionPiece value) {
      if (pieceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePieceIsMutable();
        piece_.add(index, value);
        onChanged();
      } else {
        pieceBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder addPiece(
        StreamingTranscriptionPiece.Builder builderForValue) {
      if (pieceBuilder_ == null) {
        ensurePieceIsMutable();
        piece_.add(builderForValue.build());
        onChanged();
      } else {
        pieceBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder addPiece(
        int index, StreamingTranscriptionPiece.Builder builderForValue) {
      if (pieceBuilder_ == null) {
        ensurePieceIsMutable();
        piece_.add(index, builderForValue.build());
        onChanged();
      } else {
        pieceBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder addAllPiece(
        Iterable<? extends StreamingTranscriptionPiece> values) {
      if (pieceBuilder_ == null) {
        ensurePieceIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, piece_);
        onChanged();
      } else {
        pieceBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder clearPiece() {
      if (pieceBuilder_ == null) {
        piece_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        pieceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public Builder removePiece(int index) {
      if (pieceBuilder_ == null) {
        ensurePieceIsMutable();
        piece_.remove(index);
        onChanged();
      } else {
        pieceBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public StreamingTranscriptionPiece.Builder getPieceBuilder(
        int index) {
      return getPieceFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public StreamingTranscriptionPieceOrBuilder getPieceOrBuilder(
        int index) {
      if (pieceBuilder_ == null) {
        return piece_.get(index);  } else {
        return pieceBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public java.util.List<? extends StreamingTranscriptionPieceOrBuilder>
         getPieceOrBuilderList() {
      if (pieceBuilder_ != null) {
        return pieceBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(piece_);
      }
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public StreamingTranscriptionPiece.Builder addPieceBuilder() {
      return getPieceFieldBuilder().addBuilder(
          StreamingTranscriptionPiece.getDefaultInstance());
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public StreamingTranscriptionPiece.Builder addPieceBuilder(
        int index) {
      return getPieceFieldBuilder().addBuilder(
          index, StreamingTranscriptionPiece.getDefaultInstance());
    }
    /**
     * <pre>
     * 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
     * </pre>
     *
     * <code>repeated .StreamingTranscriptionPiece piece = 2;</code>
     */
    public java.util.List<StreamingTranscriptionPiece.Builder>
         getPieceBuilderList() {
      return getPieceFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
            StreamingTranscriptionPiece, StreamingTranscriptionPiece.Builder, StreamingTranscriptionPieceOrBuilder>
        getPieceFieldBuilder() {
      if (pieceBuilder_ == null) {
        pieceBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                StreamingTranscriptionPiece, StreamingTranscriptionPiece.Builder, StreamingTranscriptionPieceOrBuilder>(
                piece_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        piece_ = null;
      }
      return pieceBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:StreamingTranscription)
  }

  // @@protoc_insertion_point(class_scope:StreamingTranscription)
  private static final StreamingTranscription DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StreamingTranscription();
  }

  public static StreamingTranscription getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StreamingTranscription>
      PARSER = new com.google.protobuf.AbstractParser<StreamingTranscription>() {
    @Override
    public StreamingTranscription parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new StreamingTranscription(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<StreamingTranscription> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<StreamingTranscription> getParserForType() {
    return PARSER;
  }

  @Override
  public StreamingTranscription getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

